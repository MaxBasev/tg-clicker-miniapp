import React, { useState } from 'react';
import '../styles/MiniGames.css';
import WebApp from '@twa-dev/sdk';

interface MiniGameProps {
	score: number;
	onScoreChange: (newScore: number) => void;
	onGame2048Select: () => void;
	onSnakeSelect: () => void;
}

export const MiniGames: React.FC<MiniGameProps> = ({ score, onScoreChange, onGame2048Select, onSnakeSelect }) => {
	const [gameResult, setGameResult] = useState<string | null>(null);
	const [isPlaying, setIsPlaying] = useState(false);

	const games = [
		{
			id: 'guess_number',
			name: '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ',
			price: 50,
			reward: 100,
			icon: 'üé≤',
			description: '–ò—Å–ø—ã—Ç–∞–π—Ç–µ —É–¥–∞—á—É!'
		},
		{
			id: 'coin_flip',
			name: '–û—Ä–µ–ª –∏–ª–∏ —Ä–µ—à–∫–∞',
			price: 25,
			reward: 50,
			icon: 'ü™ô',
			description: '–ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É'
		},
		{
			id: '2048',
			name: '2048',
			price: 0,
			reward: 0,
			icon: 'üß©',
			description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∞',
			customAction: onGame2048Select
		},
		{
			id: 'snake',
			name: '–ó–º–µ–π–∫–∞',
			price: 0,
			reward: 0,
			icon: 'üêç',
			description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∑–º–µ–π–∫–∞',
			customAction: onSnakeSelect
		}
	];

	const playGuessNumber = () => {
		const number = Math.floor(Math.random() * 10) + 1;
		const guess = Math.floor(Math.random() * 10) + 1;

		if (guess === number) {
			onScoreChange(score + games[0].reward);
			setGameResult(`üéâ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ ${number}! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${games[0].reward} –º–æ–Ω–µ—Ç!`);
		} else {
			setGameResult(`üòî –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ ${number}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!`);
		}
		setIsPlaying(false);
	};

	const playCoinFlip = () => {
		const result = Math.random() < 0.5;
		const playerChoice = Math.random() < 0.5;

		if (result === playerChoice) {
			onScoreChange(score + games[1].reward);
			setGameResult(`üéâ ${result ? '–û—Ä–µ–ª' : '–†–µ—à–∫–∞'}! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${games[1].reward} –º–æ–Ω–µ—Ç!`);
		} else {
			setGameResult(`üòî ${result ? '–û—Ä–µ–ª' : '–†–µ—à–∫–∞'}! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!`);
		}
		setIsPlaying(false);
	};

	const startGame = (gameId: string) => {
		const game = games.find(g => g.id === gameId);
		if (!game) return;

		if (game.customAction) {
			game.customAction();
			return;
		}

		if (score < game.price) {
			WebApp.showAlert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –∏–≥—Ä—ã!');
			return;
		}

		onScoreChange(score - game.price);
		setIsPlaying(true);
		setGameResult(null);

		if (gameId === 'guess_number') {
			playGuessNumber();
		} else if (gameId === 'coin_flip') {
			playCoinFlip();
		}
	};

	return (
		<div className="mini-games">
			<h3 className="mini-games-title">–ú–∏–Ω–∏-–∏–≥—Ä—ã</h3>

			{gameResult && (
				<div className="game-result">
					{gameResult}
				</div>
			)}

			<div className="games-list">
				{games.map(game => (
					<div
						key={game.id}
						className={`game-card ${score < game.price ? 'disabled' : ''}`}
						onClick={() => !isPlaying && startGame(game.id)}
					>
						<div className="game-icon">{game.icon}</div>
						<div className="game-info">
							<h4>{game.name}</h4>
							<p>{game.description}</p>
							<div className="game-price">
								<span>–¶–µ–Ω–∞: {game.price} üí∞</span>
								<span>–ù–∞–≥—Ä–∞–¥–∞: {game.reward} üí∞</span>
							</div>
						</div>
					</div>
				))}
			</div>
		</div>
	);
}; 